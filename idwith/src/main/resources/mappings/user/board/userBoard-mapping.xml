<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="UserDAO">
 	<resultMap type="userVO" id="userResult">
 		<result property="user_id" column="user_id"/>
 		<result property="user_pwd" column="user_pwd"/>
 		<result property="user_name" column="user_name"/>
 		<result property="user_phone" column="user_phone"/>
 		<result property="user_zipcode" column="user_zipcode"/>
 		<result property="user_address1" column="user_address1"/>
 		<result property="user_address2" column="user_address2"/>
 		<result property="user_recommender" column="user_recommender"/>
 		<result property="user_grade" column="user_grade"/>
 		<result property="user_allmcount" column="user_allmcount"/>
 		<result property="user_joinDate" column="user_joinDate"/>
 		<result property="user_class_sellyn" column="user_class_sellyn"/>
 		<result property="user_option_zipcode" column="user_option_zipcode"/>
 		<result property="user_option_addr1" column="user_option_addr1"/>
 		<result property="user_option_addr2" column="user_option_addr2"/>
 		<result property="user_order" column="user_order"/>
 		<result property="user_black_check" column="user_black_check"/>
 		<collection property="userAddressVO" resultMap="userAddressResult" />
 	</resultMap>
 	
 	<resultMap type="userAddressVO" id="userAddressResult">
 		<result property="user_address_seq" column="user_address_seq" />
 		<result property="user_id" column="user_id" />
 		<result property="user_order" column="user_order" />
 		<result property="user_name" column="user_name" />
 		<result property="user_phone" column="user_phone" />
 		<result property="user_zipcode" column="user_zipcode" />
 		<result property="user_address1" column="user_address1" />
 		<result property="user_address2" column="user_address2" />
 	</resultMap>
 	
 	<resultMap type="saveVO" id="saveResult">
 		<result property="save_seq" column="save_seq"/>
 		<result property="save_id" column="save_id"/>
 		<result property="save_point" column="save_point"/>
 		<result property="order_save_true" column="order_save_true"/>
 		<result property="save_goods_code" column="save_goods_code"/>
 	</resultMap>
 	
 	<resultMap type="couponHaveVO" id="couponHaveResult">
 		<result property="coupon_have_seq" column="coupon_have_seq"/>
 		<result property="coupon_have_id" column="coupon_have_id"/>
 		<result property="coupon_have_code" column="coupon_have_code"/>
 		<result property="coupon_have_date" column="coupon_have_date"/>
 		<result property="coupon_context" column="coupon_context"/>
 		<result property="coupon_discount" column="coupon_discount"/>
 	</resultMap> 
 	
 	<resultMap type="couponUseVO" id="couponUseResult">
 		<result property="coupon_use_seq" column="coupon_use_seq"/>
 		<result property="coupon_use_id" column="coupon_use_id"/>
 		<result property="coupon_use_date" column="coupon_use_date"/>
 		<result property="coupon_use_goods" column="coupon_use_goods"/>
 		<result property="coupon_use_code" column="coupon_use_code"/>
 	</resultMap> 
 	
 	<!-- 회원가입 -->
 	<insert id="insertUser" parameterType="userVO">
 		INSERT INTO client (user_id, user_pwd, user_name, user_phone)
 		VALUES(#{user_id}, #{user_pwd}, #{user_name}, #{user_phone})
 	</insert>
 	
 	<!-- 회원가입 시 배송지(1)에 회원정보 저장 -->
 	<insert id="insertAddressOne" parameterType="userAddressVO">
 		insert into user_address (user_id, user_order, user_name, user_phone)
 		values(#{user_id}, #{user_order}, #{user_name}, #{user_phone})
 	</insert>
 	
 	<!-- 회원가입 시 배송지(1)에 회원정보 저장 -->
 	<insert id="insertAddress" parameterType="userAddressVO">
 		insert into user_address (user_id, user_order) values(#{user_id}, #{user_order})
 	</insert>
 	
 	<!-- 카카오로 회원가입 -->
 	<insert id="insertKakao" parameterType="userVO">
 		INSERT INTO client (user_id, user_pwd)
 		VALUES(#{user_id}, #{user_pwd})
 	</insert>
 	
 	<!-- 이메일 중복체크 -->
 	<select id="selectEmail" resultType="_int">
 		SELECT count(*) FROM client WHERE user_id=#{user_id}
 	</select>
 	
 	<!-- 전화번호 중복체크 -->
 	<select id="selectCellPhone" resultType="_int">
 		SELECT count(*) FROM client WHERE user_phone=#{user_phone}
 	</select>
 	
 	<!-- 아이디가 존재하는지 확인 -->
 	<select id="idCheck" resultType="_boolean">
 		select exists (select * from client where user_id=#{user_id}) as isChk;
 	</select>
 	
 	<!-- 아이디가 있을 시 아이디, 비밀번호 가져가기 -->
 	<select id="selectLogin" resultType="userVO">
 		select user_id, user_pwd from client where user_id=#{user_id}
 	</select>
 	
 	<!-- 유저 정보 가져가기 -->
 	<select id="getLoginUser" resultType="userVO">
 		select * from client where user_id=#{user_id}
 	</select>
 	
 	<!-- 아이디 찾기 시 해당ID가 테이블에 존재하는지 확인 -->
 	<select id="userCheck" resultType="_boolean">
 		select exists (select * from client where user_phone=#{user_phone}) as isChk;
 	</select>
 	
 	<!-- 아이디 찾기 시 해당 전화번호로 회원가입한 ID목록 불러오기 -->
 	<select id="getUserList" resultType="map">
 		select user_id from client where user_phone=#{user_phone}
 	</select>
 	
 	<!-- 아이디 찾기 시 가입한 ID에 저장했던 이름목록 가져오기 -->
 	<select id="getUserNameList" resultType="map">
 		select user_name from client where user_id=#{user_id}
 	</select>
 	
 	<select id="getUserInfo" resultType="map">
 		select user_name from client where user_name=#{user_name}
 	</select>
 	
 	<!-- 결제 페이지 주문자 정보 가져오기 -->
 	<select id="getOrderUser" resultType="userVO">
 		select * from client where user_id=#{user_id}
 	</select>

 	<!-- 클래스 결제에 사용할 정보 가져오기 -->
 	<select id="getUserInfoForClassReg" parameterType="string" resultType="userVO">
 		SELECT client.*, order_save.save_seq, order_save.save_point, order_save.order_save_true FROM client
				LEFT OUTER JOIN order_save ON client.user_id = order_save.save_id 
							AND order_save.order_save_true = true
		WHERE user_id=#{email}
 	</select>
 	
 	<!-- 작품 결제에 사용할 포인트 가져오기 -->
 	<select id="getPointForPayment" parameterType="string" resultType="saveVO">
 		SELECT * FROM order_save WHERE save_id=#{user_id} AND order_save_true=true
 	</select>
 	
 	<!-- 작품 결제에 사용할 쿠폰 가져오기 -->
 	<select id="getCouponListForPayment" parameterType="string"  resultMap="couponHaveResult">
 		SELECT coupon_have_seq, coupon_have_id, coupon_have_code, coupon_have_date, coupon_context, coupon_discount FROM(
				SELECT coupon_have.*, coupon.coupon_startdate, coupon.coupon_enddate, coupon.coupon_context, coupon.coupon_discount FROM coupon_have
					LEFT OUTER JOIN coupon ON coupon_have.coupon_have_code = CAST(coupon.coupon_code AS varchar)  
					WHERE now() BETWEEN coupon.coupon_startdate AND coupon.coupon_enddate
		)AS foo WHERE foo.coupon_have_id = #{user_id}
 	</select>
 	
 	<!-- 상품/클래스 주문시 입력되는 이름, 전화번호 넣어주기 -->
 	<update id="updateUserInfoAtPayment" parameterType="userVO">
 		UPDATE client SET user_name=#{user_name}, user_phone=#{user_phone} WHERE user_id=#{user_id}
 	</update>
 	
 	<!-- 기존의 true 상태인 포인트들 false로 변환 -->
 	<update id="updateOrderSaveExist" parameterType="saveVO">
 		UPDATE order_save SET order_save_true=false WHERE save_id=#{save_id}
 	</update>
 	
 	<!-- 사용하고 남은 포인트 다시 넣어주기 -->
 	<insert id="updateOrderSaveBalance" parameterType="saveVO">
 		INSERT INTO order_save (save_id, save_point, order_save_true, save_goods_code)
 					VALUES(#{save_id}, #{save_point}, true, 'order_save_balance')
 	</insert>
 	<!-- 신규 구매로 발생한 포인트 저장 -->
 	<insert id="insertNewOrderSave" parameterType="saveVO">
 		INSERT INTO order_save (save_id, save_point, order_save_true, save_goods_code)
 					VALUES(#{save_id}, #{save_point}, true, #{save_goods_code})
 	</insert>
 	
 	<!-- 사용자 저장된 주소 있는지 확인 -->
 	<select id="addressPresenceCheck" parameterType="userAddressVO" resultType="_int">
 	 	SELECT count(*) FROM user_address WHERE user_id=#{user_id}
 	</select>
 	<!-- 상품/클래스 주문시 입력되는 주소호 넣어주기 -->
 	<insert id="updateAddressAtPayment" parameterType="userAddressVO">
 		INSERT INTO user_address (user_id, user_order, user_name, user_phone, user_zipcode, user_address1, user_address2)
 				VALUES(#{user_id}, #{user_order}, #{user_name}, #{user_phone}, #{user_zipcode}, #{user_address1}, #{user_address2})
 	</insert>
 	
 	<!-- 사용한 쿠폰 삭제 -->
 	<delete id="deleteHaveCoupon" parameterType="couponHaveVO">
 		DELETE FROM coupon_have WHERE coupon_have_id=#{coupon_have_id} AND coupon_have_code=#{coupon_have_code}
 	</delete>
 	
 	<!-- 쿠폰 사용 테이블에 저장 -->
 	<insert id="insertUseCoupon" parameterType="couponUseVO">
 		INSERT INTO coupon_use (coupon_use_id, coupon_use_code, coupon_use_date, coupon_use_goods)
 						VALUES(#{coupon_use_id}, #{coupon_use_code}, now(), #{coupon_use_goods}) 
 	</insert>
 	<select id="getCouponList" parameterType="string" resultMap="couponHaveResult">
 		SELECT coupon_have_seq, coupon_have_id, coupon_have_code, coupon_have_date, coupon_context, coupon_discount FROM(
				SELECT coupon_have.*, coupon.coupon_startdate, coupon.coupon_enddate, coupon.coupon_context, coupon.coupon_discount FROM coupon_have
					LEFT OUTER JOIN coupon ON coupon_have.coupon_have_code = CAST(coupon.coupon_code AS varchar)  
					WHERE now() BETWEEN coupon.coupon_startdate AND coupon.coupon_enddate
		)AS foo WHERE foo.coupon_have_id = #{email}
 	</select>
 	<!--  <update id="updateBoard" parameterType="myboard">
 		UPDATE myboard
 		SET title=#{title}, content=#{content} WHERE seq = #{seq}
 	</update>
 	<delete id="deleteBoard" parameterType="myboard">
 		DELETE FROM myboard WHERE seq=#{seq}
 	</delete>
 	<select id="getBoard" resultType="myboard">
 		SELECT * FROM myboard WHERE seq=#{seq}
 	</select>
 	<select id="getBoardList" resultMap="boardResult">
 		SELECT * FROM myboard
 		WHERE 1=1 
 		<if test="searchCondition=='TITLE'">
 			AND title LIKE '%'||#{searchKeyword}||'%'
 		</if>
 		<if test="searchCondition=='CONTENT'">
 			AND content LIKE '%'||#{searchKeyword}||'%'
 		</if>
 		ORDER BY seq DESC
 	</select>
 	<select id="getBoardList_C" resultMap="boardResult">
 		SELECT * FROM myboard
 		WHERE content LIKE '%'||#{searchKeyword}||'%'
 		ORDER BY seq DESC
 	</select>--> 
</mapper>