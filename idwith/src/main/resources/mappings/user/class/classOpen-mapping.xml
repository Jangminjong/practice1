<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="classDAO">
 	<resultMap type="classVO" id="classResult">
 		<result property="class_open_seq" column="class_open_seq"/>
 		<result property="class_open_name" column="class_open_name"/>
 		<result property="class_open_class_code" column="class_open_class_code"/>
 		<result property="class_open_category" column="class_open_gotegory"/>
 		<result property="class_open_price" column="class_open_price"/>
 		<result property="class_open_post_address" column="class_open_post_address"/>
 		<result property="class_open_address" column="class_open_address"/>
 		<result property="class_open_detail_address" column="class_open_detail_address"/>
 		<result property="class_open_reference" column="class_open_reference"/>
 		<result property="class_open_time" column="class_open_time"/>
 		<result property="class_open_photo" column="class_open_photo" typeHandler="org.apache.ibatis.type.ArrayTypeHandler"/>
 		<result property="class_open_date" column="class_open_date"/>
 		<result property="class_close_time" column="class_close_time"/>
 		<result property="class_open_difficult" column="class_open_difficult"/>
 		<result property="class_open_info" column="class_open_info"/>
 		<result property="class_open_phone" column="class_open_phone"/>
 		<result property="class_open_max_person" column="class_open_max_person"/>
 		<result property="class_open_seller" column="class_open_seller"/>
 	</resultMap>
 	
 	<resultMap type="classCategoryVO" id="classCategoryResult">
 		<result property="class_category_code" column="class_category_code"/>
 		<result property="class_category_name" column="class_category_name"/>
 	</resultMap>
 	
 	<resultMap type="classOrderVO" id="classOrderResult">
 		<result property="class_order_seq" column="class_order_seq"/>
 		<result property="class_order_code" column="class_order_code"/>
 		<result property="class_order_price" column="class_order_price"/>
 		<result property="class_order_date" column="class_order_date"/>
 		<result property="class_order_time" column="class_order_time"/>
 		<result property="class_order_donation" column="class_order_donation"/>
 		<result property="class_order_id" column="class_order_id"/>
 		<result property="class_order_people" column="class_order_people"/>
 		<result property="class_order_demand" column="class_order_demand"/>
 		<result property="class_payment_check" column="class_payment_check"/>
 		<result property="class_payment_date" column="class_payment_date"/>
 		<result property="class_order_name" column="class_order_name"/>
 		<result property="class_order_reserve_phone" column="class_order_reserve_phone"/>
 		<result property="class_order_reserve_name" column="class_order_reserve_name"/>
 		<result property="class_order_review" column="class_order_review"/>
 		<result property="marchant_uid" column="marchant_uid"/>
 		<result property="imp_uid" column="imp_uid"/>
 		<result property="store_name" column="store_name"/>
 	</resultMap>
 	
 	<select id="getPopularClassList" resultMap="classResult">
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name, class_order_count.class_order_cnt FROM class_open 
				LEFT OUTER JOIN class_category ON class_open.class_open_class_code= class_category.class_category_code
				LEFT OUTER JOIN (
					SELECT COUNT(class_order_code) as class_order_cnt, class_order_code FROM class_order
							GROUP BY class_order_code
							HAVING COUNT(class_order_code)>0 ORDER BY class_order_cnt DESC)AS class_order_count	
				ON class_open.class_open_class_code = class_order_count.class_order_code ORDER BY class_order_count.class_order_code)A)AS foo 
		WHERE rownum BETWEEN 1 AND 4
 	</select>
 	<select id="getCategoryName" parameterType="string" resultType="classCategoryVO">
 		SELECT * FROM class_category WHERE class_category_code=#{class_category_code}
 	</select>
 	<select id="getClassCount" parameterType="string" resultType="_int">
 		SELECT count(*) FROM class_open WHERE class_open_category=#{class_category_code}
 	</select>
 	<select id="getClassList" resultMap="classResult">
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name FROM class_open 
				LEFT OUTER JOIN class_category 
				ON class_open.class_open_category= class_category.class_category_code WHERE class_open.class_open_category=#{set})A)AS foo 
		WHERE rownum BETWEEN #{start} AND #{end}
 	</select>
 	<select id="getCategoryList" resultType="classCategoryVO">
 		SELECT * FROM class_category 
 	</select>
 	<select id="getAllClassCount" resultType="_int">
 		SELECT count(*) FROM class_open
 	</select>
 	<select id="getAllClassList" resultMap="classResult">
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name, class_order_count.class_order_cnt FROM class_open 
				LEFT OUTER JOIN class_category ON class_open.class_open_class_code= class_category.class_category_code
				LEFT OUTER JOIN (
					SELECT COUNT(class_order_code) as class_order_cnt, class_order_code FROM class_order
							GROUP BY class_order_code
							HAVING COUNT(class_order_code)>0 ORDER BY class_order_cnt DESC)AS class_order_count	
				ON class_open.class_open_class_code = class_order_count.class_order_code ORDER BY class_order_count.class_order_code)A)AS foo 
		WHERE rownum BETWEEN #{start} AND #{end}
 	</select>
 	<select id="getClassCountForRegion" parameterType="string" resultType="_int">
 	 <![CDATA[
 		SELECT count(*) FROM class_open WHERE class_open_address LIKE '%'||#{region}||'%'
 	]]>
 	</select>
 	<select id="getClassListForRegion" resultMap="classResult">
 	 <![CDATA[
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name, class_order_count.class_order_cnt FROM class_open 
				LEFT OUTER JOIN class_category ON class_open.class_open_class_code= class_category.class_category_code
				LEFT OUTER JOIN (
					SELECT COUNT(class_order_code) as class_order_cnt, class_order_code FROM class_order
							GROUP BY class_order_code
							HAVING COUNT(class_order_code)>0 ORDER BY class_order_cnt DESC)AS class_order_count	
				ON class_open.class_open_class_code = class_order_count.class_order_code ORDER BY class_order_count.class_order_code )A WHERE class_open_address LIKE '%'||#{set}||'%')AS foo 
		WHERE rownum BETWEEN #{start} AND #{end}
	 ]]>
 	</select>
 	<!-- 클래스 상세페이지 정보 조회 -->
 	<select id="getClassContentAtUser" parameterType="string" resultMap="classResult">
		SELECT class_open.*, class_category.class_category_name, class_times.time FROM class_open 
			LEFT OUTER JOIN class_category ON class_open.class_open_category= class_category.class_category_code
			LEFT OUTER JOIN(
				SELECT (class_close_time - class_open_time) as time , class_open_class_code FROM class_open
				)AS class_times 
			ON class_open.class_open_class_code = class_times.class_open_class_code
		WHERE class_open.class_open_class_code=#{class_open_class_code}
 	</select>
 	<select id="getClassListForClassDetail" parameterType="_int" resultMap="classResult">
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name FROM class_open 
				LEFT OUTER JOIN class_category 
				ON class_open.class_open_category= class_category.class_category_code WHERE class_open.class_open_seller=#{seller_code})A)AS foo 
		WHERE rownum BETWEEN 1 AND 4
 	</select>
 	<select id="getNearbyList" resultMap="classResult">
 	 <![CDATA[
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name, class_order_count.class_order_cnt FROM class_open 
				LEFT OUTER JOIN class_category ON class_open.class_open_class_code= class_category.class_category_code
				LEFT OUTER JOIN (
					SELECT COUNT(class_order_code) as class_order_cnt, class_order_code FROM class_order
							GROUP BY class_order_code
							HAVING COUNT(class_order_code)>0 ORDER BY class_order_cnt DESC)AS class_order_count	
				ON class_open.class_open_class_code = class_order_count.class_order_code ORDER BY class_order_count.class_order_code )A WHERE class_open_address LIKE '%'||#{param}||'%')AS foo 
		WHERE rownum BETWEEN 1 AND 4
	 ]]>
 	</select>
 	<select id="getNewClassList" resultMap="classResult">
 		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name FROM class_open 
				LEFT OUTER JOIN class_category 
				ON class_open.class_open_category= class_category.class_category_code ORDER BY class_open_seq DESC)A)AS foo 
		WHERE rownum BETWEEN 1 AND 4
 	</select>
 	<insert id="insertClassOrder" parameterType="classOrderVO">
 		INSERT INTO class_order (class_order_code, class_order_price, class_order_date, class_order_time, class_order_donation, 
						class_order_id, class_order_people, class_order_demand, class_payment_check, class_payment_date,
						 class_order_name, class_order_reserve_name, class_order_reserve_phone, marchant_uid, imp_uid)
				VALUES(#{class_order_code}, #{class_order_price}, #{class_order_date}, #{class_order_time}, #{class_order_donation},
					  #{class_order_id}, #{class_order_people}, #{class_order_demand}, true, now(),
					   #{class_order_name}, #{class_order_reserve_name}, #{class_order_reserve_phone},#{marchant_uid}, #{imp_uid})
 	</insert>
 	<!-- 마이페이지에 주문 내역 가져오기 -->
 	<select id="getOrderClassList" parameterType="string" resultMap="classOrderResult">
 		SELECT * FROM(
			SELECT foo.*, seller.store_name FROM (
			(SELECT class_order.*, class_open.class_open_name, class_open.class_open_photo, class_open.class_open_seller FROM class_order 
				LEFT OUTER JOIN class_open 
				ON class_order.class_order_code= class_open.class_open_class_code WHERE class_order.class_order_id=#{email} AND class_order.class_order_code NOTNULL AND class_payment_check=true)AS foo
			LEFT OUTER JOIN seller ON foo.class_open_seller = seller.seller_code))AS boo
 	</select>
 	<!-- 클래스 주문 취소 -->
 	<update id="paymentClassCancel" parameterType="string">
 		UPDATE class_order SET class_payment_check=false WHERE marchant_uid=#{marchant_uid}
 	</update>
 	
 	<!-- 검색 페이지에서 사용 -->
 	<select id="countClassForSearch" parameterType="string" resultType="_int">
 	 <![CDATA[
 		SELECT count(*) FROM (
			SELECT class_open.*, class_category.class_category_name, class_order_count.class_order_cnt FROM class_open 
				LEFT OUTER JOIN class_category ON class_open.class_open_class_code= class_category.class_category_code
				LEFT OUTER JOIN (
					SELECT COUNT(class_order_code) as class_order_cnt, class_order_code FROM class_order
							GROUP BY class_order_code
							HAVING COUNT(class_order_code)>0 ORDER BY class_order_cnt DESC)AS class_order_count	
				ON class_open.class_open_class_code = class_order_count.class_order_code ORDER BY class_order_count.class_order_code )AS foo WHERE class_open_name LIKE '%'||#{search}||'%'
	 ]]>
	</select>
	<select id="getClassListForSearch" parameterType="com.idwith.mpweb.common.PagingVO" resultMap="classResult">
	 <![CDATA[
		SELECT * FROM (
			SELECT ROW_NUMBER() OVER() as rownum, A.* FROM (
			SELECT class_open.*, class_category.class_category_name, class_order_count.class_order_cnt FROM class_open 
				LEFT OUTER JOIN class_category ON class_open.class_open_class_code= class_category.class_category_code
				LEFT OUTER JOIN (
					SELECT COUNT(class_order_code) as class_order_cnt, class_order_code FROM class_order
							GROUP BY class_order_code
							HAVING COUNT(class_order_code)>0 ORDER BY class_order_cnt DESC)AS class_order_count	
				ON class_open.class_open_class_code = class_order_count.class_order_code ORDER BY class_order_count.class_order_code )A WHERE class_open_address LIKE '%'||#{set}||'%')AS foo 
		WHERE rownum BETWEEN #{start} AND #{end}
	 ]]>
	</select>
 	<!--  <update id="updateBoard" parameterType="myboard">
 		UPDATE myboard
 		SET title=#{title}, content=#{content} WHERE seq = #{seq}
 	</update>
 	<delete id="deleteBoard" parameterType="myboard">
 		DELETE FROM myboard WHERE seq=#{seq}
 	</delete>
 	<select id="getBoard" resultType="myboard">
 		SELECT * FROM myboard WHERE seq=#{seq}
 	</select>
 	<select id="getBoardList" resultMap="boardResult">
 		SELECT * FROM myboard
 		WHERE 1=1 
 		<if test="searchCondition=='TITLE'">
 			AND title LIKE '%'||#{searchKeyword}||'%'
 		</if>
 		<if test="searchCondition=='CONTENT'">
 			AND content LIKE '%'||#{searchKeyword}||'%'
 		</if>
 		ORDER BY seq DESC
 	</select>
 	<select id="getBoardList_C" resultMap="boardResult">
 		SELECT * FROM myboard
 		WHERE content LIKE '%'||#{searchKeyword}||'%'
 		ORDER BY seq DESC
 	</select>--> 
</mapper>